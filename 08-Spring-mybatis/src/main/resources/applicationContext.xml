<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">



    <!-- 声明数据源DataSource 来连接数据库 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init"
          destroy-method="close">
        <!-- set注入DruidDataSource 连接数据库信息 -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>



    <!-- 声明mybatis中所提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- set注入 把数据库连接池给了dataSource属性 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- mybatis主配置文件的位置
             configLocation属性是Resource类型，读取配置文件
             他的赋值，使用value指定文件路径，用classpath:表示文件位置
        -->
        <property name="configLocation" value="classpath:mybatis.xml"/>

    </bean>



    <!-- 创建dao对象，使用SqlSession的getMapper -->
    <!-- MapperScannerConfigurer：在内部调用getMapper()生成每个dao接口代理对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定SqlSession对象的id -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 指定包名，包名是dao接口所在的包名
             MapperScannerConfigurer会扫描这个包中所有的接口，把每个接口都执行一次getMapper()方法
             得到每个接口的dao对象
             创建好的dao对象，是放在spring容器中的
        -->
        <property name="basePackage" value="com.Sample.dao"/>
    </bean>



    <!-- 创建Service对象 -->
    <bean id="studentService" class="com.Sample.service.impl.StudentServiceImpl">
        <property name="studentDao" ref="studentDao"/>
    </bean>

</beans>